


class Matrix {
public:
    struct MatrixIterator {
        using MatrixIterator_category = std::forward_iterator_tag;
        using difference_type   = std::ptrdiff_t;
        using value_type        = int;
        using pointer           = int*;
        using reference         = int&;

        MatrixIterator(pointer ptr) : m_ptr(ptr) {}

        reference operator*() const
        {
            return *m_ptr;
        }

        pointer operator->()
        {
            return m_ptr;
        }
        
        MatrixIterator& operator++()
        {
            m_ptr++;
            return *this;
        }  

        MatrixIterator operator++(int)
        {
            MatrixIterator tmp = *this;
            ++(*this);
            return tmp;
        }
        
        friend bool operator== (const MatrixIterator& a, const MatrixIterator& b)
        {
            return a.m_ptr == b.m_ptr;
        };
        
        friend bool operator!= (const MatrixIterator& a, const MatrixIterator& b)
        {
            return a.m_ptr != b.m_ptr;
        };  

    private:
        pointer m_ptr;
    };

    MatrixIterator begin() { return MatrixIterator(&matrix->begin()); }
    MatrixIterator end()   { return MatrixIterator(&m_data[size]); }

    Matrix(int size) : size{size}
    {
        std::cout << "Size: " << this->size << std::endl;
        m_data = new int[size];
        
        for (int i = 0; i < size; i++)
        {
            std::vector<int> line(size);
            for (int j = 0; j < size; j++)
            {
                line.push_back(i * j);
            }
            matrix.push_back(line);
        }
    }

private:
    int size = 0;
    std::vector<std::vector<int>> matrix;
};